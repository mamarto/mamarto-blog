---
layout: post
title:  "HTB Writeup - Writeup"
date:   2019-05-11 12:59:50 +0000
---


# HTB Writeup - writeup     
<br />
Let's start with a nmap to scan for open ports and services:
```
Starting Nmap 7.70 ( https://nmap.org ) at 2019-10-11 16:03 EET
Nmap scan report for writeup.htb (10.10.10.138)
Host is up (0.14s latency).
Not shown: 998 filtered ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)
| ssh-hostkey:
|   2048 dd:53:10:70:0b:d0:47:0a:e2:7e:4a:b6:42:98:23:c7 (RSA)
|   256 37:2e:14:68:ae:b9:c2:34:2b:6e:d9:92:bc:bf:bd:28 (ECDSA)
|_  256 93:ea:a8:40:42:c1:a8:33:85:b3:56:00:62:1c:a0:ab (ED25519)
80/tcp open  http    Apache httpd 2.4.25 ((Debian))
| http-robots.txt: 1 disallowed entry
|_/writeup/
|_http-server-header: Apache/2.4.25 (Debian)
|_http-title: Nothing here yet.
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 28.71 seconds
```
<br />
As we can see, there are only two open ports, one being SSH. I do not consider SSH as "low-hanging fruit" so I head to the 80 port.

http://writeup.htb/:
<img src="/assets/write3.PNG" alt="drawing" width="600"/>
<br />


Looking at the source code of the page, we can see that there is a section of the website not being crawled by search engines, which is /writeup/.
<img src="/assets/write2.PNG" alt="drawing" width="600"/>
<br />


At the very bottom of the page (or by using Wappalyzer):
```
<meta name="Generator" content="CMS Made Simple - Copyright (C) 2004-2019. All rights reserved." />
```
<br />


we can see that the pages are generated by "CMS Made Simple".

If we google exploit for the CMS, we end up with a bunch of them, however, we are not sure about the version. For these reason, I like to search for additional information in order to drill down the list of potential exploits.

This CMS is an open source tool, that means that the repository is available online. There we can find the file tree which is used by our box.
Heading to 10.10.10.138/writeup/doc/CHANGELOG.txt we can see the exact version!
<img src="/assets/write1.PNG" alt="drawing" width="600"/>
<br />



I searched for exploits for CMS Made Simple, and the only one for our version is [this SQL injection exploit]([https://www.exploit-db.com/exploits/46635]), which appears to look very "hollywood style", since it prints the character tested on screen while running:

```
[+] Salt for password found: 5a599ef579066807
[+] Username found: jkr
[+] Email found: jkr@writeup.htb
[+] Password found: 62def4866937f08cc13bab43bb14e6f7
[+] Password cracked: raykayjay9

```
<br />


Alrigth, so we have username and password now, we can login to SSH and take the user flag!
<br />


# ROOT FLAG
<br />

Let's start with the usual recon phase.

LinEnum doesn't help much, so I run pspy. Here we can see that there a couple of interesting thinhs that happen when a user logs in, in fact at each login, these commands get executed:
```
sh -c /usr/bin/env -i PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin run-parts --lsbsysinit /etc/update-motd.d > /run/motd.dynamic.new
run-parts --lsbsysinit /etc/update-motd.d
/bin/sh /etc/update-motd.d/10-uname
/bin/sh /etc/update-motd.d/10-uname

```
<br />


currently we are in a group called "staff", and this group have permissions to write to /usr/local/bin.

With the env command:
```
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
```
we can see that /usr/bin/local is before /usr/bin. This means that we can hijack the script by putting our own "run-parts" in /usr/local/bin, and at each login it will get executed as root.

I wrote a script that echoes the root flag to /tmp and I got the root flag!

